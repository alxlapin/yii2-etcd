<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Proto/rpc.proto

namespace Etcd;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>etcdserverpb.WatchCreateRequest</code>
 */
class WatchCreateRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * the key to be watched
     *
     * Generated from protobuf field <code>bytes key = 1;</code>
     */
    protected $key = '';
    /**
     * if the range_end is given, keys in [key, range_end) are watched
     * NOTE: only range_end == prefixEnd(key) is accepted now
     *
     * Generated from protobuf field <code>bytes range_end = 2;</code>
     */
    protected $range_end = '';
    /**
     * start_revision is an optional revision (including) to watch from. No start_revision is "now".
     *
     * Generated from protobuf field <code>int64 start_revision = 3;</code>
     */
    protected $start_revision = 0;
    /**
     * if progress_notify is set, etcd server sends WatchResponse with empty events to the
     * created watcher when there are no recent events. It is useful when clients want always to be
     * able to recover a disconnected watcher from a recent known revision.
     * etcdsever can decide how long it should send a notification based on current load.
     *
     * Generated from protobuf field <code>bool progress_notify = 4;</code>
     */
    protected $progress_notify = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $key
     *           the key to be watched
     *     @type string $range_end
     *           if the range_end is given, keys in [key, range_end) are watched
     *           NOTE: only range_end == prefixEnd(key) is accepted now
     *     @type int|string $start_revision
     *           start_revision is an optional revision (including) to watch from. No start_revision is "now".
     *     @type bool $progress_notify
     *           if progress_notify is set, etcd server sends WatchResponse with empty events to the
     *           created watcher when there are no recent events. It is useful when clients want always to be
     *           able to recover a disconnected watcher from a recent known revision.
     *           etcdsever can decide how long it should send a notification based on current load.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Rpc::initOnce();
        parent::__construct($data);
    }

    /**
     * the key to be watched
     *
     * Generated from protobuf field <code>bytes key = 1;</code>
     * @return string
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * the key to be watched
     *
     * Generated from protobuf field <code>bytes key = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->key = $var;

        return $this;
    }

    /**
     * if the range_end is given, keys in [key, range_end) are watched
     * NOTE: only range_end == prefixEnd(key) is accepted now
     *
     * Generated from protobuf field <code>bytes range_end = 2;</code>
     * @return string
     */
    public function getRangeEnd()
    {
        return $this->range_end;
    }

    /**
     * if the range_end is given, keys in [key, range_end) are watched
     * NOTE: only range_end == prefixEnd(key) is accepted now
     *
     * Generated from protobuf field <code>bytes range_end = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setRangeEnd($var)
    {
        GPBUtil::checkString($var, False);
        $this->range_end = $var;

        return $this;
    }

    /**
     * start_revision is an optional revision (including) to watch from. No start_revision is "now".
     *
     * Generated from protobuf field <code>int64 start_revision = 3;</code>
     * @return int|string
     */
    public function getStartRevision()
    {
        return $this->start_revision;
    }

    /**
     * start_revision is an optional revision (including) to watch from. No start_revision is "now".
     *
     * Generated from protobuf field <code>int64 start_revision = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setStartRevision($var)
    {
        GPBUtil::checkInt64($var);
        $this->start_revision = $var;

        return $this;
    }

    /**
     * if progress_notify is set, etcd server sends WatchResponse with empty events to the
     * created watcher when there are no recent events. It is useful when clients want always to be
     * able to recover a disconnected watcher from a recent known revision.
     * etcdsever can decide how long it should send a notification based on current load.
     *
     * Generated from protobuf field <code>bool progress_notify = 4;</code>
     * @return bool
     */
    public function getProgressNotify()
    {
        return $this->progress_notify;
    }

    /**
     * if progress_notify is set, etcd server sends WatchResponse with empty events to the
     * created watcher when there are no recent events. It is useful when clients want always to be
     * able to recover a disconnected watcher from a recent known revision.
     * etcdsever can decide how long it should send a notification based on current load.
     *
     * Generated from protobuf field <code>bool progress_notify = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setProgressNotify($var)
    {
        GPBUtil::checkBool($var);
        $this->progress_notify = $var;

        return $this;
    }

}

