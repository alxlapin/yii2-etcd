<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Proto/rpc.proto

namespace Etcd;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>etcdserverpb.RangeRequest</code>
 */
class RangeRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * if the range_end is not given, the request returns the key.
     *
     * Generated from protobuf field <code>bytes key = 1;</code>
     */
    protected $key = '';
    /**
     * if the range_end is given, it gets the keys in range [key, range_end)
     * if range_end is nonempty, otherwise it returns all keys >= key.
     *
     * Generated from protobuf field <code>bytes range_end = 2;</code>
     */
    protected $range_end = '';
    /**
     * limit the number of keys returned.
     *
     * Generated from protobuf field <code>int64 limit = 3;</code>
     */
    protected $limit = 0;
    /**
     * range over the store at the given revision.
     * if revision is less or equal to zero, range over the newest store.
     * if the revision has been compacted, ErrCompaction will be returned in
     * response.
     *
     * Generated from protobuf field <code>int64 revision = 4;</code>
     */
    protected $revision = 0;
    /**
     * sort_order is the requested order for returned the results
     *
     * Generated from protobuf field <code>.etcdserverpb.RangeRequest.SortOrder sort_order = 5;</code>
     */
    protected $sort_order = 0;
    /**
     * sort_target is the kv field to use for sorting
     *
     * Generated from protobuf field <code>.etcdserverpb.RangeRequest.SortTarget sort_target = 6;</code>
     */
    protected $sort_target = 0;
    /**
     * range request is linearizable by default. Linearizable requests has a higher
     * latency and lower throughput than serializable request.
     * To reduce latency, serializable can be set. If serializable is set, range request
     * will be serializable, but not linearizable with other requests.
     * Serializable range can be served locally without waiting for other nodes in the cluster.
     *
     * Generated from protobuf field <code>bool serializable = 7;</code>
     */
    protected $serializable = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $key
     *           if the range_end is not given, the request returns the key.
     *     @type string $range_end
     *           if the range_end is given, it gets the keys in range [key, range_end)
     *           if range_end is nonempty, otherwise it returns all keys >= key.
     *     @type int|string $limit
     *           limit the number of keys returned.
     *     @type int|string $revision
     *           range over the store at the given revision.
     *           if revision is less or equal to zero, range over the newest store.
     *           if the revision has been compacted, ErrCompaction will be returned in
     *           response.
     *     @type int $sort_order
     *           sort_order is the requested order for returned the results
     *     @type int $sort_target
     *           sort_target is the kv field to use for sorting
     *     @type bool $serializable
     *           range request is linearizable by default. Linearizable requests has a higher
     *           latency and lower throughput than serializable request.
     *           To reduce latency, serializable can be set. If serializable is set, range request
     *           will be serializable, but not linearizable with other requests.
     *           Serializable range can be served locally without waiting for other nodes in the cluster.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Rpc::initOnce();
        parent::__construct($data);
    }

    /**
     * if the range_end is not given, the request returns the key.
     *
     * Generated from protobuf field <code>bytes key = 1;</code>
     * @return string
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * if the range_end is not given, the request returns the key.
     *
     * Generated from protobuf field <code>bytes key = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->key = $var;

        return $this;
    }

    /**
     * if the range_end is given, it gets the keys in range [key, range_end)
     * if range_end is nonempty, otherwise it returns all keys >= key.
     *
     * Generated from protobuf field <code>bytes range_end = 2;</code>
     * @return string
     */
    public function getRangeEnd()
    {
        return $this->range_end;
    }

    /**
     * if the range_end is given, it gets the keys in range [key, range_end)
     * if range_end is nonempty, otherwise it returns all keys >= key.
     *
     * Generated from protobuf field <code>bytes range_end = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setRangeEnd($var)
    {
        GPBUtil::checkString($var, False);
        $this->range_end = $var;

        return $this;
    }

    /**
     * limit the number of keys returned.
     *
     * Generated from protobuf field <code>int64 limit = 3;</code>
     * @return int|string
     */
    public function getLimit()
    {
        return $this->limit;
    }

    /**
     * limit the number of keys returned.
     *
     * Generated from protobuf field <code>int64 limit = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setLimit($var)
    {
        GPBUtil::checkInt64($var);
        $this->limit = $var;

        return $this;
    }

    /**
     * range over the store at the given revision.
     * if revision is less or equal to zero, range over the newest store.
     * if the revision has been compacted, ErrCompaction will be returned in
     * response.
     *
     * Generated from protobuf field <code>int64 revision = 4;</code>
     * @return int|string
     */
    public function getRevision()
    {
        return $this->revision;
    }

    /**
     * range over the store at the given revision.
     * if revision is less or equal to zero, range over the newest store.
     * if the revision has been compacted, ErrCompaction will be returned in
     * response.
     *
     * Generated from protobuf field <code>int64 revision = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setRevision($var)
    {
        GPBUtil::checkInt64($var);
        $this->revision = $var;

        return $this;
    }

    /**
     * sort_order is the requested order for returned the results
     *
     * Generated from protobuf field <code>.etcdserverpb.RangeRequest.SortOrder sort_order = 5;</code>
     * @return int
     */
    public function getSortOrder()
    {
        return $this->sort_order;
    }

    /**
     * sort_order is the requested order for returned the results
     *
     * Generated from protobuf field <code>.etcdserverpb.RangeRequest.SortOrder sort_order = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setSortOrder($var)
    {
        GPBUtil::checkEnum($var, \Etcd\RangeRequest_SortOrder::class);
        $this->sort_order = $var;

        return $this;
    }

    /**
     * sort_target is the kv field to use for sorting
     *
     * Generated from protobuf field <code>.etcdserverpb.RangeRequest.SortTarget sort_target = 6;</code>
     * @return int
     */
    public function getSortTarget()
    {
        return $this->sort_target;
    }

    /**
     * sort_target is the kv field to use for sorting
     *
     * Generated from protobuf field <code>.etcdserverpb.RangeRequest.SortTarget sort_target = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setSortTarget($var)
    {
        GPBUtil::checkEnum($var, \Etcd\RangeRequest_SortTarget::class);
        $this->sort_target = $var;

        return $this;
    }

    /**
     * range request is linearizable by default. Linearizable requests has a higher
     * latency and lower throughput than serializable request.
     * To reduce latency, serializable can be set. If serializable is set, range request
     * will be serializable, but not linearizable with other requests.
     * Serializable range can be served locally without waiting for other nodes in the cluster.
     *
     * Generated from protobuf field <code>bool serializable = 7;</code>
     * @return bool
     */
    public function getSerializable()
    {
        return $this->serializable;
    }

    /**
     * range request is linearizable by default. Linearizable requests has a higher
     * latency and lower throughput than serializable request.
     * To reduce latency, serializable can be set. If serializable is set, range request
     * will be serializable, but not linearizable with other requests.
     * Serializable range can be served locally without waiting for other nodes in the cluster.
     *
     * Generated from protobuf field <code>bool serializable = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setSerializable($var)
    {
        GPBUtil::checkBool($var);
        $this->serializable = $var;

        return $this;
    }

}

