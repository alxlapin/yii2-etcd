<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Proto/rpc.proto

namespace Etcd;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>etcdserverpb.WatchResponse</code>
 */
class WatchResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.etcdserverpb.ResponseHeader header = 1;</code>
     */
    protected $header = null;
    /**
     * watch_id is the ID of the watching the response sent to.
     *
     * Generated from protobuf field <code>int64 watch_id = 2;</code>
     */
    protected $watch_id = 0;
    /**
     * If the response is for a create watch request, created is set to true.
     * Client should record the watch_id and prepare for receiving events for
     * that watching from the same stream.
     * All events sent to the created watching will attach with the same watch_id.
     *
     * Generated from protobuf field <code>bool created = 3;</code>
     */
    protected $created = false;
    /**
     * If the response is for a cancel watch request, cancel is set to true.
     * No further events will be sent to the canceled watching.
     *
     * Generated from protobuf field <code>bool canceled = 4;</code>
     */
    protected $canceled = false;
    /**
     * CompactRevision is set to the minimum index if a watching tries to watch
     * at a compacted index.
     * This happens when creating a watching at a compacted revision or the watching cannot
     * catch up with the progress of the KV.
     * Client should treat the watching as canceled and should not try to create any
     * watching with same start_revision again.
     *
     * Generated from protobuf field <code>int64 compact_revision = 5;</code>
     */
    protected $compact_revision = 0;
    /**
     * Generated from protobuf field <code>repeated .storagepb.Event events = 11;</code>
     */
    private $events;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Etcd\ResponseHeader $header
     *     @type int|string $watch_id
     *           watch_id is the ID of the watching the response sent to.
     *     @type bool $created
     *           If the response is for a create watch request, created is set to true.
     *           Client should record the watch_id and prepare for receiving events for
     *           that watching from the same stream.
     *           All events sent to the created watching will attach with the same watch_id.
     *     @type bool $canceled
     *           If the response is for a cancel watch request, cancel is set to true.
     *           No further events will be sent to the canceled watching.
     *     @type int|string $compact_revision
     *           CompactRevision is set to the minimum index if a watching tries to watch
     *           at a compacted index.
     *           This happens when creating a watching at a compacted revision or the watching cannot
     *           catch up with the progress of the KV.
     *           Client should treat the watching as canceled and should not try to create any
     *           watching with same start_revision again.
     *     @type array<\Etcd\Event>|\Google\Protobuf\Internal\RepeatedField $events
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Rpc::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.etcdserverpb.ResponseHeader header = 1;</code>
     * @return \Etcd\ResponseHeader|null
     */
    public function getHeader()
    {
        return $this->header;
    }

    public function hasHeader()
    {
        return isset($this->header);
    }

    public function clearHeader()
    {
        unset($this->header);
    }

    /**
     * Generated from protobuf field <code>.etcdserverpb.ResponseHeader header = 1;</code>
     * @param \Etcd\ResponseHeader $var
     * @return $this
     */
    public function setHeader($var)
    {
        GPBUtil::checkMessage($var, \Etcd\ResponseHeader::class);
        $this->header = $var;

        return $this;
    }

    /**
     * watch_id is the ID of the watching the response sent to.
     *
     * Generated from protobuf field <code>int64 watch_id = 2;</code>
     * @return int|string
     */
    public function getWatchId()
    {
        return $this->watch_id;
    }

    /**
     * watch_id is the ID of the watching the response sent to.
     *
     * Generated from protobuf field <code>int64 watch_id = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setWatchId($var)
    {
        GPBUtil::checkInt64($var);
        $this->watch_id = $var;

        return $this;
    }

    /**
     * If the response is for a create watch request, created is set to true.
     * Client should record the watch_id and prepare for receiving events for
     * that watching from the same stream.
     * All events sent to the created watching will attach with the same watch_id.
     *
     * Generated from protobuf field <code>bool created = 3;</code>
     * @return bool
     */
    public function getCreated()
    {
        return $this->created;
    }

    /**
     * If the response is for a create watch request, created is set to true.
     * Client should record the watch_id and prepare for receiving events for
     * that watching from the same stream.
     * All events sent to the created watching will attach with the same watch_id.
     *
     * Generated from protobuf field <code>bool created = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setCreated($var)
    {
        GPBUtil::checkBool($var);
        $this->created = $var;

        return $this;
    }

    /**
     * If the response is for a cancel watch request, cancel is set to true.
     * No further events will be sent to the canceled watching.
     *
     * Generated from protobuf field <code>bool canceled = 4;</code>
     * @return bool
     */
    public function getCanceled()
    {
        return $this->canceled;
    }

    /**
     * If the response is for a cancel watch request, cancel is set to true.
     * No further events will be sent to the canceled watching.
     *
     * Generated from protobuf field <code>bool canceled = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setCanceled($var)
    {
        GPBUtil::checkBool($var);
        $this->canceled = $var;

        return $this;
    }

    /**
     * CompactRevision is set to the minimum index if a watching tries to watch
     * at a compacted index.
     * This happens when creating a watching at a compacted revision or the watching cannot
     * catch up with the progress of the KV.
     * Client should treat the watching as canceled and should not try to create any
     * watching with same start_revision again.
     *
     * Generated from protobuf field <code>int64 compact_revision = 5;</code>
     * @return int|string
     */
    public function getCompactRevision()
    {
        return $this->compact_revision;
    }

    /**
     * CompactRevision is set to the minimum index if a watching tries to watch
     * at a compacted index.
     * This happens when creating a watching at a compacted revision or the watching cannot
     * catch up with the progress of the KV.
     * Client should treat the watching as canceled and should not try to create any
     * watching with same start_revision again.
     *
     * Generated from protobuf field <code>int64 compact_revision = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setCompactRevision($var)
    {
        GPBUtil::checkInt64($var);
        $this->compact_revision = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>repeated .storagepb.Event events = 11;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getEvents()
    {
        return $this->events;
    }

    /**
     * Generated from protobuf field <code>repeated .storagepb.Event events = 11;</code>
     * @param array<\Etcd\Event>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setEvents($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Etcd\Event::class);
        $this->events = $arr;

        return $this;
    }

}

